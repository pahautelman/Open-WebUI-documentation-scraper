reference: https://docs.openwebui.com/getting-started/updating
title: ðŸ”„ Updating Open WebUI

ðŸš€ Getting StartedðŸ”„ Updating Open WebUI

ðŸš€ Getting Started

ðŸ”„ Updating Open WebUI

Why isn't my Open WebUI updating?â€‹

To update your local Docker installation of Open WebUI to the latest version available, you can either use Watchtower or manually update the container. Follow either of the steps provided below to be guided through updating your existing Open WebUI image.

Manual Updateâ€‹

Stop and remove the current container: This will stop the running container and remove it, but it won't delete the data stored in the Docker volume. (Replace open-webui with your container's name throughout the updating process if it's different for you.)

Stop and remove the current container: This will stop the running container and remove it, but it won't delete the data stored in the Docker volume. (Replace open-webui with your container's name throughout the updating process if it's different for you.)

Stop and remove the current container:

This will stop the running container and remove it, but it won't delete the data stored in the Docker volume. (Replace open-webui with your container's name throughout the updating process if it's different for you.)

open-webui

docker rm -f open-webui

docker rm -f open-webui

Pull the latest Docker image: This will update the Docker image, but it won't update the running container or its data.

Pull the latest Docker image: This will update the Docker image, but it won't update the running container or its data.

Pull the latest Docker image:

This will update the Docker image, but it won't update the running container or its data.

docker pull ghcr.io/open-webui/open-webui:main

docker pull ghcr.io/open-webui/open-webui:main

Remove any existing data in the Docker volume (NOT RECOMMENDED UNLESS ABSOLUTELY NECCESSARY!). Skip this step entirely if not needed and move on to the last step:

If you want to start with a clean slate, you can remove the existing data in the Docker volume. Be careful, as this will delete all your chat histories and other data.

The data is stored in a Docker volume named open-webui. You can remove it with the following command:

open-webui

docker volume rm open-webui

docker volume rm open-webui

Start the container again with the updated image and existing volume attached: If you didn't remove the existing data, this will start the container with the updated image and the existing data. If you removed the existing data, this will start the container with the updated image and a new, empty volume. For Nvidia GPU support, add --gpus all to the docker run command

Start the container again with the updated image and existing volume attached: If you didn't remove the existing data, this will start the container with the updated image and the existing data. If you removed the existing data, this will start the container with the updated image and a new, empty volume. For Nvidia GPU support, add --gpus all to the docker run command

Start the container again with the updated image and existing volume attached:

If you didn't remove the existing data, this will start the container with the updated image and the existing data. If you removed the existing data, this will start the container with the updated image and a new, empty volume. For Nvidia GPU support, add --gpus all to the docker run command

--gpus all

docker run -d -p 3000:8080 -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:main

docker run -d -p 3000:8080 -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:main

Keeps being logged out after every update?â€‹

If you find yourself getting logged out after every update, ensure that WEBUI_SECRET_KEY is set in your environment variables. Without this key being consistently defined, your authentication sessions may be invalidated after updates.

WEBUI_SECRET_KEY

To set WEBUI_SECRET_KEY persistently, include it when running your Docker container:

WEBUI_SECRET_KEY

docker run -d -p 3000:8080 -v open-webui:/app/backend/data --name open-webui -e WEBUI_SECRET_KEY=your_secret_key ghcr.io/open-webui/open-webui:main

docker run -d -p 3000:8080 -v open-webui:/app/backend/data --name open-webui -e WEBUI_SECRET_KEY=your_secret_key ghcr.io/open-webui/open-webui:main

Or, if using docker-compose, add it under the environment section:

environment

version: '3'services: open-webui: image: ghcr.io/open-webui/open-webui:main ports: - "3000:8080" volumes: - open-webui:/app/backend/data environment: - WEBUI_SECRET_KEY=your_secret_key

version: '3'services: open-webui: image: ghcr.io/open-webui/open-webui:main ports: - "3000:8080" volumes: - open-webui:/app/backend/data environment: - WEBUI_SECRET_KEY=your_secret_key

For more details on environment variable settings, check the Open WebUI documentation on security variables.

Automatically Updating Open WebUI with Watchtowerâ€‹

You can use Watchtower to automate the update process for Open WebUI. Here are three options:

Option 1: One-time Updateâ€‹

You can run Watchtower as a one-time update to stop the current container, pull the latest image, and start a new container with the updated image and existing volume attached (For Nvidia GPU support, add --gpus all to the docker run command):

--gpus all

docker run --rm --volume /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --run-once open-webui

docker run --rm --volume /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --run-once open-webui

Option 2: Running Watchtower as a Separate Containerâ€‹

You can run Watchtower as a separate container that watches and updates your Open WebUI container:

docker run -d --name watchtower \ --volume /var/run/docker.sock:/var/run/docker.sock \ containrrr/watchtower -i 300 open-webui

docker run -d --name watchtower \ --volume /var/run/docker.sock:/var/run/docker.sock \ containrrr/watchtower -i 300 open-webui

This will start Watchtower in detached mode, watching your Open WebUI container for updates every 5 minutes.

Option 3: Integrating Watchtower with a docker-compose.yml Fileâ€‹

docker-compose.yml

You can also integrate Watchtower with your docker-compose.yml file to automate updates for Open WebUI (For Nvidia GPU support, add --gpus all to the docker run command):

docker-compose.yml

--gpus all

version: '3'services: open-webui: image: ghcr.io/open-webui/open-webui:main ports: - "3000:8080" volumes: - open-webui:/app/backend/data watchtower: image: containrrr/watchtower volumes: - /var/run/docker.sock:/var/run/docker.sock command: --interval 300 open-webui depends_on: - open-webuivolumes: open-webui:

version: '3'services: open-webui: image: ghcr.io/open-webui/open-webui:main ports: - "3000:8080" volumes: - open-webui:/app/backend/data watchtower: image: containrrr/watchtower volumes: - /var/run/docker.sock:/var/run/docker.sock command: --interval 300 open-webui depends_on: - open-webuivolumes: open-webui:

In this example, Watchtower is integrated with the docker-compose.yml file and watches the Open WebUI container for updates every 5 minutes.

docker-compose.yml

Persistent Data in Docker Volumesâ€‹

The data is stored in a Docker volume named open-webui. The path to the volume is not directly accessible, but you can inspect the volume with the following command:

open-webui

docker volume inspect open-webui

docker volume inspect open-webui

This will show you the details of the volume, including the mountpoint, which is usually located in /var/lib/docker/volumes/open-webui/_data.

/var/lib/docker/volumes/open-webui/_data

On Windows 10 + WSL 2, Docker volumes are located here (type in the Windows file explorer):

\\wsl$\docker-desktop\mnt\docker-desktop-disk\data\docker\volumes

\\wsl$\docker-desktop\mnt\docker-desktop-disk\data\docker\volumes

For older versions of Docker (pre-Docker v26.1.4):

\\wsl$\docker-desktop-data\data\docker\volumes \\wsl$\docker-desktop-data\version-pack-data\community\docker\volumes

\\wsl$\docker-desktop-data\data\docker\volumes

\\wsl$\docker-desktop-data\version-pack-data\community\docker\volumes

(Windows answer credit to StackOverflow user sarye-haddadi; link to original SO post)