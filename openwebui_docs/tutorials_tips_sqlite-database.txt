reference: https://docs.openwebui.com/tutorials/tips/sqlite-database
title: Open-WebUI Internal SQLite Database

📝 Tutorials💡 Tips & Tricks💠 SQLite Database Overview

📝 Tutorials

💡 Tips & Tricks

💠 SQLite Database Overview

This tutorial is a community contribution and is not supported by the Open WebUI team. It serves only as a demonstration on how to customize Open WebUI for your specific use case. Want to contribute? Check out the contributing tutorial.

[!WARNING] This documentation was created based on the current version (0.5.11) and is constantly being updated.

For Open-WebUI, the SQLite database serves as the backbone for user management, chat history, file storage, and various other core functionalities. Understanding this structure is essential for anyone looking to contribute to or maintain the project effectively.

Internal SQLite Location​

You can find the SQLite database at root -> data -> webui.db

root

data

webui.db

📁 Root (/)├── 📁 data│ ├── 📁 cache│ ├── 📁 uploads│ ├── 📁 vector_db│ └── 📄 webui.db├── 📄 dev.sh├── 📁 open_webui├── 📄 requirements.txt├── 📄 start.sh└── 📄 start_windows.bat

📁 Root (/)├── 📁 data│ ├── 📁 cache│ ├── 📁 uploads│ ├── 📁 vector_db│ └── 📄 webui.db├── 📄 dev.sh├── 📁 open_webui├── 📄 requirements.txt├── 📄 start.sh└── 📄 start_windows.bat

Copy Database Locally​

If you want to copy the Open-WebUI SQLite database running in the container to your local machine, you can use:

docker cp open-webui:/app/backend/data/webui.db ./webui.db

docker cp open-webui:/app/backend/data/webui.db ./webui.db

Alternatively, you can access the database within the container using:

docker exec -it open-webui /bin/sh

docker exec -it open-webui /bin/sh

Table Overview​

Here is a complete list of tables in Open-WebUI's SQLite database. The tables are listed alphabetically and numbered for convenience.

Note: there are two additional tables in Open-WebUI's SQLite database that are not related to Open-WebUI's core functionality, that have been excluded:

Alembic Version table Migrate History table

Alembic Version table

Migrate History table

Now that we have all the tables, let's understand the structure of each table.

Auth Table​

Things to know about the auth table:

Uses UUID for primary key One-to-One relationship with users table (shared id)

Uses UUID for primary key

One-to-One relationship with users table (shared id)

users

Channel Table​

Things to know about the auth table:

Uses UUID for primary key Case-insensitive channel names (stored lowercase)

Uses UUID for primary key

Case-insensitive channel names (stored lowercase)

Channel Member Table​

Chat Table​

Chat ID Tag Table​

Config​

Feedback Table​

The meta field's expected structure:

meta

{ "name": string, # Optional display name "content_type": string, # MIME type "size": integer, # File size in bytes # Additional metadata supported via ConfigDict(extra="allow")}

{ "name": string, # Optional display name "content_type": string, # MIME type "size": integer, # File size in bytes # Additional metadata supported via ConfigDict(extra="allow")}

Folder Table​

Things to know about the folder table:

Folders can be nested (parent_id reference) Root folders have null parent_id Folder names must be unique within same parent

Folders can be nested (parent_id reference)

Root folders have null parent_id

Folder names must be unique within same parent

Function Table​

Things to know about the folder table:

type can only be: ["filter", "action"]

type can only be: ["filter", "action"]

type

Group Table​

Knowledge Table​

The access_control fields expected structure:

access_control

{ "read": { "group_ids": ["group_id1", "group_id2"], "user_ids": ["user_id1", "user_id2"] }, "write": { "group_ids": ["group_id1", "group_id2"], "user_ids": ["user_id1", "user_id2"] }}

{ "read": { "group_ids": ["group_id1", "group_id2"], "user_ids": ["user_id1", "user_id2"] }, "write": { "group_ids": ["group_id1", "group_id2"], "user_ids": ["user_id1", "user_id2"] }}

Memory Table​

Message Table​

Message Reaction Table​

Model Table​

Prompt Table​

Tag Table​

Things to know about the tag table:

Primary key is composite (id, user_id)

Primary key is composite (id, user_id)

Tool Table​

User Table​

To help visualize the relationship between the tables, refer to the below Entity Relationship Diagram (ERD) generated with Mermaid.